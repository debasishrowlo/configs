set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

colors delek

set nohlsearch
set relativenumber
set number
set tabstop=2
set shiftwidth=2
set splitright
set smartcase
set ic
set smartindent
set noswapfile
set nobackup
set nowritebackup
set noundofile

let mapleader=","

imap jk <ESC>
imap JK <ESC>
map ; :
map <F2> :e $MYVIMRC<CR>
map <C-h> <C-w>h
map <C-l> <C-w>l
map <C-j> <C-w>j
map <C-k> <C-w>k
map <F3> :NERDTreeToggle<CR>
map <F4> :NERDTreeFind<CR>
map <C-t> :tabnew<CR>
map tj :tabnext<CR>
map tk :tabprev<CR>
map th :tabm -1<CR>
map tl :tabm +1<CR>
map <Leader>, <C-y>,
map <Leader>s :%s/
map <Leader>c :.,$s/
map <Leader>f :Unite line<CR> i

noremap <silent> <c-u> :call smooth_scroll#up(&scroll*2, 10, 4)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll*2, 10, 4)<CR>

xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'mattn/emmet-vim'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'tmhedberg/matchit'
Plugin 'terryma/vim-smooth-scroll'
Plugin 'Wutzara/vim-materialtheme'
Plugin 'junegunn/vim-easy-align'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'captbaritone/better-indent-support-for-php-with-html'
Plugin 'Valloric/YouCompleteMe'
Plugin 'Shougo/vimproc.vim'
Plugin 'Shougo/unite.vim'
Plugin 'SirVer/ultisnips'
Plugin 'Raimondi/delimitMate'
Plugin 'vitalk/vim-simple-todo'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'


" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"

call vundle#end()            " required
filetype plugin indent on
syntax enable

set wildignore+=/bower_components,/node_modules,*.*~
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|bower_components\|vendor'
